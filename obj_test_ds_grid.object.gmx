<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//create grid
have_draw = false;
globalvar current_value_of_mystery_box, mistery_box_instance, ds_grid_value_list, gold_count;
gold_count = 0;

randomize();
my_grid = ds_grid_create(6, 6);

for(x_position = 0; x_position &lt; 6; x_position++){
    for(y_position = 0; y_position &lt; 6; y_position++){
        ds_grid_add(my_grid, x_position, y_position, choose("Bomb", "Gold"));
    }
}

for(x_position = 0; x_position &lt; 6; x_position++){
    for(y_position = 0; y_position &lt; 6; y_position++){
        if(ds_grid_get(my_grid, x_position, y_position) == "Gold"){
             gold_count++;
             ds_grid_set(my_grid, x_position, y_position, string(check_how_many_bomb_around(my_grid, x_position, y_position)));
             }
}
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_test_ds_grid</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//check how many bomb around
if(have_draw == false){
//handle inline
have_draw = true;
//handle outline
//for(x_position = 0; x_position &lt; 6; x_position++){
//    for(y_position = 0; y_position &lt; 6; y_position++){
//        if(ds_grid_get(my_grid, x_position, y_position) == "Gold")
//             ds_grid_set(my_grid, x_position, y_position, string(check_how_many_bomb_around(my_grid, x_position, y_position)));
//}
//}
//draw out 
var i = 0;
for(x_position = 0; x_position &lt; 6; x_position++){
    for(y_position = 0; y_position &lt; 6; y_position++){
             //if(ds_grid_get(my_grid, x_position, y_position) != "Bomb") current_value_of_mystery_box =    
                mistery_box_instance[i] = instance_create(192 + x_position*128, 192 + y_position*96, obj_mistery_box);
                ds_grid_value_list[i] = ds_grid_get(my_grid, x_position, y_position);
                //instance_create(96 + x_position*128, 96 + y_position*96, obj_number_1);
                i++;
                draw_text(192 + x_position *96,192 + y_position *96, ds_grid_get(my_grid, x_position, y_position));
    }
}
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
